mt.lm
summary(mt.lm)
aov(mt.lm)
aov(mt.lm2)
847.7/10105.7
278.322/3936.62
sum(resid(mt.lm)^2)/(sum(resid(mt.lm2)^2))
confint(mt.lm)
-6.486308*2
sqrt((.36+.68^2)/10)
-2/sqrt((.36+.68^2)/10)
c(-1,1)*qt(.975,9)*.2867752/sqrt(10)
-2+c(-1,1)*qt(.975,9)*.2867752/sqrt(10)
qt(.975,9)
sqrt((.36+.68^2)/2)
-2+c(-1,1)*qt(.975,9)*sqrt((.36+.68^2)/2)/sqrt(10)
-2+c(-1,1)*qt(.975,9)*sqrt((.6^2+.68^2)/2)/sqrt(10)
-2+c(-1,1)*qt(.975,9)*sqrt((.6^2+.68^2)/2)
-2+c(-1,1)*qt(.975,9)*sqrt((.6^2+.68^2)/2)/sqrt(5)
sqrt((1.5^2+1.8^2)/2)
-4+c(-1,1)*qt(.95,8)1.66/3
-4+c(-1,1)*qt(.95,8)*1.66/3
-5.364+2.636
-5.531+2.469
qt(.95,8)
c(-1,1)*qt(.95,8)*1.66/3
sqrt(1.5^2/9+1.8^2/9)
qt(.95,8)
sqrt(1.5^2/9+1.8^2/9)*qt(.95,8)
sqrt(1.5^2/9+1.8^2/9)*qt(.95,8)*2
(1.5^2/9+1.8^2/9)^2/((1.5^2/9)^2/8+(1.8^2/9)^2/8)
qt(.95,15.5)
qt(.95,15.5)/3
3/qt(.95,15.5)
2.7/qt(.95,15.5)
2.8/qt(.95,15.5)
2.9/qt(.95,15.5)
-5.364+2.636
-5.531+2.469
(-5.531+2.469)/2
(-5.364+2.636)/2
qt(.9,8)
sqrt((1.5^2+1.8^2)/2)
-4+c(-1,1)*qt(.9,8)*sqrt((1.5^2+1.8^2)/2)
-4+c(-1,1)*qt(.9,8)*sqrt((1.5^2+1.8^2)/2)/3
-4+c(-1,1)*qt(.95,8)*sqrt((1.5^2+1.8^2)/2)/3
-4+c(-1,1)*qt(.975,8)*sqrt((1.5^2+1.8^2)/2)/3
-4+c(-1,1)*qt(.9,8)*sqrt((1.5^2+1.8^2)/2)/3
-4+c(-1,1)*qt(.99,8)*sqrt((1.5^2+1.8^2)/2)/3
-4+c(-1,1)*qt(.975,8)*sqrt((1.5^2+1.8^2)/2)/3
-2+c(-1,1)*qt(.975,8)*1/3
-2+c(-1,1)*qt(.975,8)*2/3
-2+c(-1,1)*qt(.975,8)*3/3
-2+c(-1,1)*qt(.975,8)*2.1/3
-2+c(-1,1)*qt(.975,8)*2.6/3
-2+c(-1,1)*qt(.975,8)*2.7/3
-2+c(-1,1)*qt(.975,8)*2.5/3
-2+c(-1,1)*qt(.975,9)*sqrt((.6^2+.68^2)/2)/sqrt(10)
-5.364+2.36
-5.531+2.469
-5.364+2.636
(-5.364+2.636)/2
4-1.364
-2+c(-1,1)*qt(.975,9)*sqrt((.6^2+.68^2)/2)/sqrt(10)
-2+c(-1,1)*qt(.95,9)*sqrt((.6^2+.68^2)/2)/sqrt(10)
-2+c(-1,1)*qt(.99,9)*sqrt((.6^2+.68^2)/2)/sqrt(10)
-2+c(-1,1)*qt(.975,8)*sqrt((.6^2+.68^2)/2)/sqrt(10)
-2+c(-1,1)*qt(.975,9)*sqrt((.6^2+.68^2)/2)/sqrt(10)
-2+c(-1,1)*qt(.975,9)*.6/sqrt(10)
-2+c(-1,1)*qt(.975,9)*.8/sqrt(10)
-2+c(-1,1)*qt(.975,9)*.1/sqrt(10)
-2+c(-1,1)*qt(.975,9)*1/sqrt(10)
-2+c(-1,1)*qt(.975,9)*1.2/sqrt(10)
-2+c(-1,1)*qt(.975,9)*1.1/sqrt(10)
-2+c(-1,1)*qt(.975,9)*1.05/sqrt(10)
-2+c(-1,1)*qt(.975,9)*.99/sqrt(10)
-2+c(-1,1)*qt(.975,9)*.8/sqrt(10)
-2+c(-1,1)*qt(.975,9)*.9/sqrt(10)
-2+c(-1,1)*qt(.975,9)*1/sqrt(10)
sqrt(.6^2+.68^2)
-2+c(-1,1)*qt(.975,9)*1/3
-2+c(-1,1)*qt(.975,9)*sqrt((.6^2+.68^2)/2)/sqrt(10)
2+c(-1,1)*qt(.975,99)*sqrt((4.25)/2)/10
qt(.95,10)
qt(.9,10)
1100 + c(1,-1)*qt(.025,8)*30/3
?biplot
biplot(princomp(USArrests))
biplot(princomp(mtcars))
princomp(mtcars)
5/sqrt(40)
5 + c(-1,1)*1.96* 5 / 40
5 + c(-1,1)*1.96* 5 /sqrt(40)
1.75/25.4
plot(ppois(1:20,1:10))
plot(ppois(1:20,1:20))
prcomp(mtcars)
biplot(prcomp(mtcars))
round(prcomp(mtcars),2)
print(prcomp(mtcars))
print(prcomp(mtcars),digits=2)
names(mtcars)
print(eign(mtcars),digits=2)
print(eigen(mtcars),digits=2)
print(eigen(cov(mtcars)),digits=2)
plot(eigen(cov(mtcars)))
plot(eigen(cov(mtcars))$vectors)
identify()
identify(eigen(cov(mtcars))$vectors[,1])
identify(eigen(cov(mtcars))$vectors[,1])
names(mtcars)
plot(eigen(cov(mtcars[,c(-3,-4)]))$vectors)
?scores
?prcomp
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
il.t$diagnosis=diagnosis[inTrain]
non-pca=glm(diagnosis~.,data=il.t)
il.t=training[,58:69]
il.t$diagnosis=diagnosis[inTrain]
non-pca=glm(diagnosis~.,data=il.t)
non-pca=glm(diagnosis~.,data=il.t,family=binomial)
non_pca=glm(diagnosis~.,data=il.t,family=binomial)
modelFit=train(il.t[,13]~il.t[,-13],method="glm",preProcess="pca")
modelFit=train(il.t[,13]~il.t[,-13],method="glm",preProcess="pca",family=binomial)
head(il.t[,13])
modelFit=train(il.t[,13]~.,method="glm",preProcess="pca",family=binomial)
modelFit=train(il.t[,13]~.,method="glm",preProcess="pca",family=binomial,data=il.t)
modelFit=train(diagnosis~.,method="glm",preProcess="pca",family=binomial,data=il.t)
install.packages("e1071")
modelFit=train(diagnosis~.,method="glm",preProcess="pca",family=binomial,data=il.t)
confusionMatrix(testing$diagnosis,predict(modelFit,testing))
confusionMatrix(testing$diagnosis,predict(non_pca,testing))
confusionMatrix(il.t$diagnosis,predict(modelFit,il.t))
?train
modelFit=train(diagnosis~.,method="glm",preProcess="pca",pcaComp=3,family=binomial,data=il.t)
modelFit=train(diagnosis~.,method="glm",preProcess="pca",family=binomial,data=il.t)
head(diagnosis*1)
head((diagnosis)*1)
head((diagnosis=="Impaired")*1)
head((diagnosis=="Impaired"))
head(diagnosis)
confusionMatrix(il.t$diagnosis,predict(modelFit,il.t[,-13]))
confusionMatrix(il.t$diagnosis,predict(non_pca,il.t[,-13]))
head(predict(non_pca,il.t[,-13]))
length(predict(non_pca,il.t[,-13]))
confusionMatrix(diagnosis[testing],predict(non_pca,testing))
confusionMatrix(diagnosis[-inTrain],predict(non_pca,testing))
length(diagnosis[-inTrain])
length(testing)
length(diagnosis)
test2=testing[,58:69]
train2=training[,58:69]
test2.diag=diagnosis[inTrain]
train2.diag=diagnosis[-inTrain]
non_pca=glm(test2.diag~.,data=test2,family=binomial)
length(test2)
length(test2[,1])
length(test2.diag)
length(train2.diag)
test2.diag=diagnosis[-inTrain]
train2.diag=diagnosis[inTrain]
non_pca=glm(test2.diag~.,data=test2,family=binomial)
length(test2.diag)
modelFit=train(train2.diag~.,method="glm",preProcess="pca",pcaComp=3,family=binomial,data=train2)
warnings
warnings()
?prinComp
?princomp
princomp(~.,data=test2)
summary(princomp(~.,data=test2))
pca=preProcess(test2.diag,method="pca",pcaComp=3)
pca=preProcess(test2,method="pca",pcaComp=3)
head(predict(pca,test2))
confusionMatrix(test2.diag,predict(non_pca,test2))
length(test2.diag)
non_pca=glm(train2.diag~.,data=train2,family=binomial)
confusionMatrix(test2.diag,predict(non_pca,test2))
head(predict(non_pca,test2))
length(test2.diag)
head(test2.diag)
length(predict(non_pca,test2))
?predict
head(predict(non_pca,test2,type="response"))
summary(test2)
head(predict(non_pca,newdata=test2,type="response"))
summary(non_pca)
head(predict(non_pca))
confusionMatrix(test2.diag,predict(non_pca,test2))
modelFit=train(train2.diag~.,method="glm",preProcess="pca",pcaComp=3,family=binomial,data=train2)
modelFit=train(train2.diag~.,method="glm",preProcess="pca",family=binomial,data=train2)
confusionMatrix(test2.diag,predict(modelFit,test2))
modelFit=train(train2.diag~.,method="glm",preProcess="pca",family="binomial",data=train2)
modelFit=train(train2.diag~.,method="glm",preProcess="pca",pcaComp=3,family="binomial",data=train2)
modelFit=train(train2.diag~.,method="glm",family="binomial",data=train2)
confusionMatrix(test2.diag,predict(modelFit,test2))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
data(concrete)
?concrete
summary(mixtures)
hist(log(concrete$SuperPlasticizer))
head(log(concrete$SuperPlasticizer))
log(0)
summary(concrete$SuperPlasticizer)
head(concrete$SuperPlasticizer)
head(concrete$Superplasticizer)
head(log(concrete$Superplasticizer))
hist(log(concrete$Superplasticizer))
summary(log(concrete$Superplasticizer)
)
summary((concrete$Superplasticizer))
hist((concrete$Superplasticizer))
exp(.5)
(1.75/2)^2*240*pi
577.268^.33333
577.268^.33333/2.54
1:2:10
0:2:10
1:2:.1
?:
?":"
seq(1,2,.2)
.1:.3
.1:3
n=1:10; q=seq(0,1,.1)
plot(q,(n*(1-q)-1)/(n*(1+q)+1))
q=seq(0,1,.1)
fn=function(n)(n*(1-q)-1)/(n*(1+q)+1)
n2=fn(2);n4=fn(4);n6=fn(6);n8=fn(8);
plot(q,n2)
points(n4)
points(q,n4)
points(q,n6)
points(q,n8)
n8
plot(seq(0,2,.1),n2)
plot(x=seq(0,2,.1),n2)
plot(x=seq(0,2,.2),n2)
plot(q,n2,ylim=c(-.5,1))
points(q,n4);points(q,n6);points(q,n8);
points(q,fn(16))
points(q,fn(64))
poly(x,5)
x=2
poly(x,5)
head(mtcars)
?poly
ploy(mpg,3,data=mtcars)
ploy(mtcars$mpg,3)
poly(mtcars$mpg,3)
poly(mtcars$mpg,2)
poly(mtcars$mpg,1)
mtcars$mpg
mean(mtcars$mpg)
poly(mtcars$mpg,2)
od <- options(digits = 3) # avoid too much visual clutter
(z <- poly(1:10, 3))
predict(z, seq(2, 4, 0.5))
predict(z,1:5)
head(cars)
x=poly(cars,3)
x=poly(cars,2)
length(cars[,1])
3/8*25.4
5/16*25.4
x=sd(c(.78,.74,.77,.86,.79))
x
x=c(.78,.74,.77,.86,.79)
mean(x)-1
arctan(.5)
tan(1)
tan(30*180/pi)
tan(30/180*pi)
sin(30/180*pi)
arctan(1)
apropos("tan")
atan(1)
atan(.75)/pi*180
asin(.5)/pi*180
atan(.5/12)/pi*180
library(dplyr)
install.packages("dplyr")
library(dplyr)
head(wages)
tbl_df(wages)
head(mpg)
$sqrt(a*b*c)$
names(knitr::knit_engines$get())
str(knitr::knit_engines$get())
str(knitr::knit_engines
)
setwd("~/R/coursera/devdataprod-016/bezier/shiny")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
{(x=2);(y=3)}
{(x=2);(y=3);(z=1)}
(x=2);(y=3);(z=1)
1;2;3
{1;2;3}
?switch
switch("1","2","1"=5)
switch(2,"2","1"=5)
switch(0,"2","1"=5)
switch(2,"2","1"=5)
switch(2,"2"=4,"1"=5)
switch(3,"2"=4,"1"=5)
switch(1,"2"=4,"1"=5)
switch(2,"2"=4,"1"=5)
switch(3,"2"=4,"1"=5)
x=2
switch(x,"2"=4,"1"=5)
x=1
switch(x,"2"=4,"1"=5)
x="1"
switch(x,"2"=4,"1"=5)
switch(x,"2"={a=3;4},"1"=5)
x="2"
switch(x,"2"={a=3;4},"1"=5)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?textOutput
